# -*- coding: utf-8 -*-
##############################
### Lizhe Sun
### onlineSCAD
##############################
################
### Load Package
################
import datageneration
import numpy as np
import onlineFSA
##############################
########################################################################################
########################################################################################
def SCAD_threshold(beta, lbd):
    #################
    p = beta.shape[0]
    #################
    for j in range(p):
        #############################
        if np.abs(beta[j, 0]) <= lbd:
            beta[j, 0] = 0
        #############################
        elif (np.abs(beta[j, 0]) > lbd and np.abs(beta[j, 0]) <= 2 * lbd):
            beta[j, 0] = beta[j, 0] - lbd * np.sign(beta[j, 0])
        #############################
        elif (np.abs(beta[j, 0]) > 2 * lbd and np.abs(beta[j, 0]) <= 3.7 * lbd):
            beta[j, 0] = (2.7 * lbd * beta[j, 0] - 3.7 * lbd**2 * np.sign(beta[j, 0])) / (1.7 * lbd)
        #############################
        else:
            beta[j, 0] = beta[j, 0]
        #############################
    return(beta)
########################################################################################            
########################################################################################
########################################################################################    
########################################################################################
def onlineSCAD(XX, XY, n, lbd, T):
    #################
    #################
    p = XX.shape[0]
    eig_vec, U = np.linalg.eig((XX))
    rho = np.sqrt(np.real(eig_vec[0])) + 10
    beta_init = np.zeros((p, 1)) 
    #################
    #################
    for i in range(T):
        ################################
        grad_beta  = onlineFSA.gradient_l2(XX, XY, beta_init)
        beta = rho * beta_init - grad_beta / rho
        beta = SCAD_threshold(beta, lbd)
        beta = beta / rho
        ################################
        ################################
        if (np.linalg.norm(beta - beta_init) <= 1e-5):
            break
        beta_init = beta
        ################################
    return(beta)
#####################################################################
#####################################################################    
########################################################################################
########################################################################################
########################################################################################
gen_dat = {"n":10000, "p":1000, "k":100, "alpha":1, "beta_star":1, "dat_type":1}    
Xdat, Ydat, beta_true, istar = datageneration.generate_data(gen_dat)
ra_dat = onlineFSA.running_aves(Xdat, Ydat)
XX_dat, XY_dat, mu_xdat, mu_ydat, std_x = onlineFSA.standardize_ra(ra_dat)
########################################################################################
########################################################################################
########################################################################################
beta_SCAD = onlineSCAD(XX_dat, XY_dat, 10000, 162.58, 500)
beta_sel = np.flatnonzero(beta_SCAD)
########################################################################################
########################################################################################

